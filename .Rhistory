152/(4.2*1e6)
(152/(4.2*1e6))*1e6
(147/(3.8*1e6))*1e6
3345897*(1/320)
5728-34
2022-2004
52*30
514.37*4
474.80*4
install.packages("polmineR")
install.packages("GermaParl")
use("GermaParl")
library(polmineR)
use("GermaParl")
corpus()
size("GERMAPARL")
size(GERMAPARL)
size("GERMAPARLMINI")
?corpus
devtools::install_github("PolMine/GermaParl", ref = "dev")
library(tidyverse)
# read data
d <- readLines("ReN_anno_2019-08-14/Agneta_Willeken.xml")
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
setwd("~/sciebo/Futurkonstruktionen/REN/CoraXML_ReN")
library(tidyverse)
# read data
d <- readLines("ReN_anno_2019-08-14/Agneta_Willeken.xml")
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
header_name
# get header
header_start <- grep("<header", d)
header_end   <- grep("</header", d)
hdr <- d[header_start:header_end]
hdr
hdr
gsub(":", "=\"", hdr)
hdr <- gsub(":", "=\"", hdr)
gsub("(?<=$)", "\"", hdr, perl = T)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
paste0(hdr)
paste0(hdr, collapse = " ")
gsub("</?header>", "", paste0(hdr, collapse = " "))
hdr[1:2]
hdr <- gsub(":", "=\"", hdr)
hdr <- d[header_start:header_end]
hdr <- gsub(":", "=\"", hdr)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
hdr
hdr <- d[header_start:header_end]
?sub
sub(":", "", "blabla: bla: bl")
hdr <- sub(":", "=\"", hdr)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
hdr
paste0(hdr, collapse = " ")
gsub("</?header>", "", paste0(hdr, collapse = " "))
gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " ")))
paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), collapse = " ")
paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " ")), ">"), collapse = " ")
paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), ">", collapse = " ")
text_header <- paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), ">", collapse = " ")
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
# empty table for dipl, lemma, POS, morph
cur_tbl <- tibble(
token_id = character(length(token_start)),
dipl     = character(length(token_start)),
lemma    = character(length(token_start)),
pos      = character(length(token_start)),
morph    = character(length(token_start))
)
for(i in 1:length(token_start)) {
cur <-d[token_start[i]:token_end[i]]
if(length(grep(".*<token id=\"", cur)) > 0) {
cur_tbl$token_id[i] <- gsub("\".*", "", gsub(".*<token id=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$token_id[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$dipl[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$dipl[i] <- "-"
}
if(length(grep(".*<lemma tag=\"", cur)) > 0) {
cur_tbl$lemma[i] <- gsub("\".*", "", gsub(".*<lemma tag=\"", "", cur[grep("lemma tag", cur)]))
} else {
cur_tbl$lemma[i] <- "-"
}
if(length(grep(".*<morph tag=\"", cur)) > 0) {
cur_tbl$morph[i] <- gsub("\".*", "", gsub(".*<morph tag=\"", "", cur[grep("morph tag", cur)]))
} else {
cur_tbl$morph[i] <- "-"
}
if(length(grep(".*<pos tag=\"", cur)) > 0) {
cur_tbl$pos[i] <- gsub("\".*", "", gsub(".*<pos tag=\"", "", cur[grep("pos tag", cur)]))
} else {
cur_tbl$pos[i] <- "-"
}
}
# file header
c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>")
# file header
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
# file header
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
# file header
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
hdr
sub("=.*", "", hdr)
paste0(sub("=.*", "", hdr), collapse = "+")
# file header
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\">", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
# file header
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
library(tidyverse)
# read data
d <- readLines("ReN_anno_2019-08-14/Agneta_Willeken.xml")
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
# get header
header_start <- grep("<header", d)
header_end   <- grep("</header", d)
hdr <- d[header_start:header_end]
hdr <- sub(":", "=\"", hdr)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
text_header <- paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), ">", collapse = " ")
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
# empty table for dipl, lemma, POS, morph
cur_tbl <- tibble(
word     = character(length(token_start)),
token_id = character(length(token_start)),
dipl     = character(length(token_start)),
lemma    = character(length(token_start)),
pos      = character(length(token_start)),
morph    = character(length(token_start))
)
# extract values
for(i in 1:length(token_start)) {
cur <-d[token_start[i]:token_end[i]]
if(length(grep(".*<token id=\"", cur)) > 0) {
cur_tbl$token_id[i] <- gsub("\".*", "", gsub(".*<token id=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$token_id[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$dipl[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$dipl[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$word[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$word[i] <- "-"
}
if(length(grep(".*<lemma tag=\"", cur)) > 0) {
cur_tbl$lemma[i] <- gsub("\".*", "", gsub(".*<lemma tag=\"", "", cur[grep("lemma tag", cur)]))
} else {
cur_tbl$lemma[i] <- "-"
}
if(length(grep(".*<morph tag=\"", cur)) > 0) {
cur_tbl$morph[i] <- gsub("\".*", "", gsub(".*<morph tag=\"", "", cur[grep("morph tag", cur)]))
} else {
cur_tbl$morph[i] <- "-"
}
if(length(grep(".*<pos tag=\"", cur)) > 0) {
cur_tbl$pos[i] <- gsub("\".*", "", gsub(".*<pos tag=\"", "", cur[grep("pos tag", cur)]))
} else {
cur_tbl$pos[i] <- "-"
}
}
# create CWB file
# file header
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table(c("</text>", "</corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
cur_tbl
# list files
list.files("ReN_anno_2019-08-14/")
# list files
f <- list.files("ReN_anno_2019-08-14/", full.names = T)
# read data
d <- readLines(f[1])
# list files
f <- list.files("ReN_anno_2019-08-14/", full.names = T)
for(j in 1:length(f)) {
# read data
d <- readLines(f[j])
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
# get header
header_start <- grep("<header", d)
header_end   <- grep("</header", d)
hdr <- d[header_start:header_end]
hdr <- sub(":", "=\"", hdr)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
text_header <- paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), ">", collapse = " ")
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
# empty table for dipl, lemma, POS, morph
cur_tbl <- tibble(
word     = character(length(token_start)),
token_id = character(length(token_start)),
dipl     = character(length(token_start)),
lemma    = character(length(token_start)),
pos      = character(length(token_start)),
morph    = character(length(token_start))
)
# extract values
for(i in 1:length(token_start)) {
cur <-d[token_start[i]:token_end[i]]
if(length(grep(".*<token id=\"", cur)) > 0) {
cur_tbl$token_id[i] <- gsub("\".*", "", gsub(".*<token id=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$token_id[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$dipl[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$dipl[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$word[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$word[i] <- "-"
}
if(length(grep(".*<lemma tag=\"", cur)) > 0) {
cur_tbl$lemma[i] <- gsub("\".*", "", gsub(".*<lemma tag=\"", "", cur[grep("lemma tag", cur)]))
} else {
cur_tbl$lemma[i] <- "-"
}
if(length(grep(".*<morph tag=\"", cur)) > 0) {
cur_tbl$morph[i] <- gsub("\".*", "", gsub(".*<morph tag=\"", "", cur[grep("morph tag", cur)]))
} else {
cur_tbl$morph[i] <- "-"
}
if(length(grep(".*<pos tag=\"", cur)) > 0) {
cur_tbl$pos[i] <- gsub("\".*", "", gsub(".*<pos tag=\"", "", cur[grep("pos tag", cur)]))
} else {
cur_tbl$pos[i] <- "-"
}
}
# create CWB file
# file header
if(j == 1) {
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
}
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table("</text>",
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
if(j == length(f)) {
write.table("</corpus>",
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
}
print(j)
}
warnings()
grep("wērden", d)
grep("wērden", d, value = T)
12650/24
gsub("\".*", "", gsub(".*<lemma_wsd tag=\"", "", cur[grep("lemma_wsd tag", cur)]))
gsub("\".*", "", gsub(".*<bound_sent tag=\"", "", cur[grep("bound_sent tag", cur)]))
cur
library(tidyverse)
# list files
f <- list.files("ReN_anno_2019-08-14/", full.names = T)
for(j in 1:length(f)) {
# read data
d <- readLines(f[j])
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
# get header
header_start <- grep("<header", d)
header_end   <- grep("</header", d)
hdr <- d[header_start:header_end]
hdr <- sub(":", "=\"", hdr)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
text_header <- paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), ">", collapse = " ")
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
# empty table for dipl, lemma, POS, morph
cur_tbl <- tibble(
word      = character(length(token_start)),
token_id  = character(length(token_start)),
dipl      = character(length(token_start)),
lemma     = character(length(token_start)),
pos       = character(length(token_start)),
morph     = character(length(token_start)),
lemma_wsd = character(length(token_start)),
bound_sent = character(length(token_start)),
)
# extract values
for(i in 1:length(token_start)) {
cur <-d[token_start[i]:token_end[i]]
if(length(grep(".*<token id=\"", cur)) > 0) {
cur_tbl$token_id[i] <- gsub("\".*", "", gsub(".*<token id=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$token_id[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$dipl[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$dipl[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$word[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$word[i] <- "-"
}
if(length(grep(".*<lemma tag=\"", cur)) > 0) {
cur_tbl$lemma[i] <- gsub("\".*", "", gsub(".*<lemma tag=\"", "", cur[grep("lemma tag", cur)]))
} else {
cur_tbl$lemma[i] <- "-"
}
if(length(grep(".*<lemma_wsd tag=\"", cur)) > 0) {
cur_tbl$lemma_wsd[i] <- gsub("\".*", "", gsub(".*<lemma_wsd tag=\"", "", cur[grep("lemma_wsd tag", cur)]))
} else {
cur_tbl$lemma_wsd[i] <- "-"
}
if(length(grep(".*<morph tag=\"", cur)) > 0) {
cur_tbl$morph[i] <- gsub("\".*", "", gsub(".*<morph tag=\"", "", cur[grep("morph tag", cur)]))
} else {
cur_tbl$morph[i] <- "-"
}
if(length(grep(".*<pos tag=\"", cur)) > 0) {
cur_tbl$pos[i] <- gsub("\".*", "", gsub(".*<pos tag=\"", "", cur[grep("pos tag", cur)]))
} else {
cur_tbl$pos[i] <- "-"
}
if(length(grep(".*<bound_sent tag=\"", cur)) > 0) {
cur_tbl$pos[i] <- gsub("\".*", "", gsub(".*<bound_sent tag=\"", "", cur[grep("bound_sent tag", cur)]))
} else {
cur_tbl$pos[i] <- "-"
}
}
# create CWB file
# file header
if(j == 1) {
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
}
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table("</text>",
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
if(j == length(f)) {
write.table("</corpus>",
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
}
print(j)
}
library(tidyverse)
# list files
f <- list.files("ReN_anno_2019-08-14/", full.names = T)
for(j in 1:length(f)) {
# read data
d <- readLines(f[j])
# get metadata
header_name <- gsub("\".*", "", gsub(".*name=\"", "", grep("<cora-header name", d, value = T)))
# get header
header_start <- grep("<header", d)
header_end   <- grep("</header", d)
hdr <- d[header_start:header_end]
hdr <- sub(":", "=\"", hdr)
hdr <- gsub("(?<=$)", "\"", hdr, perl = T)
text_header <- paste0("<text id=\"", header_name, "\"", gsub("text=\"", "text_name=\"", gsub("</?header>", "", paste0(hdr, collapse = " "))), ">", collapse = " ")
# get tokens
token_start <- grep("<token id", d)
token_end   <- grep("</token", d)
# empty table for dipl, lemma, POS, morph
cur_tbl <- tibble(
word      = character(length(token_start)),
token_id  = character(length(token_start)),
dipl      = character(length(token_start)),
lemma     = character(length(token_start)),
pos       = character(length(token_start)),
morph     = character(length(token_start)),
lemma_wsd = character(length(token_start)),
bound_sent = character(length(token_start)),
)
# extract values
for(i in 1:length(token_start)) {
cur <-d[token_start[i]:token_end[i]]
if(length(grep(".*<token id=\"", cur)) > 0) {
cur_tbl$token_id[i] <- gsub("\".*", "", gsub(".*<token id=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$token_id[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$dipl[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$dipl[i] <- "-"
}
if(length(grep(".*<token id=\".*trans", cur)) > 0) {
cur_tbl$word[i] <- gsub("\".*", "", gsub(".*trans=\"", "", cur[grep("token id", cur)]))
} else {
cur_tbl$word[i] <- "-"
}
if(length(grep(".*<lemma tag=\"", cur)) > 0) {
cur_tbl$lemma[i] <- gsub("\".*", "", gsub(".*<lemma tag=\"", "", cur[grep("lemma tag", cur)]))
} else {
cur_tbl$lemma[i] <- "-"
}
if(length(grep(".*<lemma_wsd tag=\"", cur)) > 0) {
cur_tbl$lemma_wsd[i] <- gsub("\".*", "", gsub(".*<lemma_wsd tag=\"", "", cur[grep("lemma_wsd tag", cur)]))
} else {
cur_tbl$lemma_wsd[i] <- "-"
}
if(length(grep(".*<morph tag=\"", cur)) > 0) {
cur_tbl$morph[i] <- gsub("\".*", "", gsub(".*<morph tag=\"", "", cur[grep("morph tag", cur)]))
} else {
cur_tbl$morph[i] <- "-"
}
if(length(grep(".*<pos tag=\"", cur)) > 0) {
cur_tbl$pos[i] <- gsub("\".*", "", gsub(".*<pos tag=\"", "", cur[grep("pos tag", cur)]))
} else {
cur_tbl$pos[i] <- "-"
}
if(length(grep(".*<bound_sent tag=\"", cur)) > 0) {
cur_tbl$bound_sent[i] <- gsub("\".*", "", gsub(".*<bound_sent tag=\"", "", cur[grep("bound_sent tag", cur)]))
} else {
cur_tbl$bound_sent[i] <- "-"
}
}
# create CWB file
# file header
if(j == 1) {
write.table(c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<corpus>"),
"ren.vrt", row.names = F, col.names = F, quote = F)
}
write.table(text_header,
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
write.table(cur_tbl,
"ren.vrt", sep = "\t", row.names = F, col.names = F, quote = F, append = T)
write.table("</text>",
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
if(j == length(f)) {
write.table("</corpus>",
"ren.vrt", row.names = F, col.names = F, quote = F, append = T)
}
print(j)
}
readLines("ren.vrt", n = 1000)
